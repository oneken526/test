---
description:
globs:
alwaysApply: false
---

# Laravel Service & Repository Pattern - Cursor Rules

## アーキテクチャルール

### 基本フロー
- 必ず `Controller → Service → Repository → Model` の順で処理を実装する
- 層をスキップした直接呼び出しは禁止（例：ControllerからRepository、ServiceからModel直接呼び出し）

### ディレクトリ構成
```
app/
├── Http/Controllers/
├── Services/
├── Repositories/
│   └── Interfaces/
└── Models/
```

## Controller層のルール

### 責務
- リクエストの受け取りとレスポンスの返却のみに専念
- ビジネスロジックは一切記述しない（Fat Controllerの回避）
- バリデーションはFormRequestクラスまたはController内で実装

### コード規約
```php
<?php
namespace App\Http\Controllers;

use App\Services\{ServiceName};
use Illuminate\Http\Request;

class {ModelName}Controller extends Controller
{
    protected ${serviceName};

    public function __construct({ServiceName} ${serviceName})
    {
        $this->{serviceName} = ${serviceName};
    }

    public function {methodName}(Request $request)
    {
        // バリデーション
        $validatedData = $request->validate([
            // バリデーションルール
        ]);

        // Serviceメソッド呼び出し
        $result = $this->{serviceName}->{methodName}($validatedData);

        return response()->json($result);
    }
}
```

## Service層のルール

### 責務
- ビジネスロジックの実装
- データの整形・加工
- バリデーション処理
- 外部API連携
- トランザクション処理
- 例外処理

### コード規約
```php
<?php
namespace App\Services;

use App\Repositories\{ModelName}Repository;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class {ModelName}Service
{
    protected ${repositoryName};

    public function __construct({ModelName}Repository ${repositoryName})
    {
        $this->{repositoryName} = ${repositoryName};
    }

    public function {methodName}(array $data)
    {
        try {
            return DB::transaction(function () use ($data) {
                // ビジネスロジック実装

                // Repository呼び出し
                $result = $this->{repositoryName}->{methodName}($data);

                // データ整形・加工

                return $result;
            });
        } catch (\Exception $e) {
            Log::error('Error message: ' . $e->getMessage());
            throw $e;
        }
    }
}
```

## Repository層のルール

### 責務
- データアクセスロジックの実装
- CRUD操作の提供
- クエリの記述
- データ取得方法の隠蔽

### 注意事項
- データの整形・加工は行わない（Service層で実装）
- ビジネスロジックは含めない

### インターフェース実装
```php
<?php
namespace App\Repositories\Interfaces;

interface {ModelName}RepositoryInterface
{
    public function findById(int $id);
    public function create(array $data);
    public function update(int $id, array $data);
    public function delete(int $id);
}
```

### Repository実装
```php
<?php
namespace App\Repositories;

use App\Models\{ModelName};
use App\Repositories\Interfaces\{ModelName}RepositoryInterface;

class {ModelName}Repository implements {ModelName}RepositoryInterface
{
    public function findById(int $id)
    {
        return {ModelName}::find($id);
    }

    public function create(array $data)
    {
        return {ModelName}::create($data);
    }

    public function update(int $id, array $data)
    {
        $model = {ModelName}::findOrFail($id);
        $model->update($data);
        return $model;
    }

    public function delete(int $id)
    {
        return {ModelName}::destroy($id);
    }

    // 複雑なクエリの例
    public function findWithConditions(array $conditions)
    {
        $query = {ModelName}::query();

        if (isset($conditions['name'])) {
            $query->where('name', 'like', '%' . $conditions['name'] . '%');
        }

        return $query->get();
    }
}
```

## Model層のルール

### 責務
- データ構造の定義
- リレーションの定義
- アクセサ・ミューテータの実装
- スコープの定義

```php
<?php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class {ModelName} extends Model
{
    use HasFactory, SoftDeletes;

    protected $fillable = [
        // 設定可能フィールド
    ];

    protected $guarded = ['id'];

    protected $dates = ['deleted_at'];

    protected $casts = [
        // キャスト設定
    ];

    // リレーション定義
    public function relatedModel()
    {
        return $this->belongsTo(RelatedModel::class);
    }
}
```

## 依存性注入（DI）設定

### AppServiceProvider登録
```php
// app/Providers/AppServiceProvider.php
public function register()
{
    // Service層のバインド
    $this->app->bind('App\Services\{ServiceName}');

    // Repository層のバインド
    $this->app->bind(
        'App\Repositories\Interfaces\{ModelName}RepositoryInterface',
        'App\Repositories\{ModelName}Repository'
    );
}
```

## テスト実装ルール

### Service層テスト
- Repository層をモック化
- ビジネスロジックの動作確認
- 例外処理のテスト

### Repository層テスト
- データベース操作の確認
- ファクトリーを使用したテストデータ作成

## 命名規約

### ファイル・クラス名
- Controller: `{ModelName}Controller`
- Service: `{ModelName}Service`
- Repository: `{ModelName}Repository`
- Interface: `{ModelName}RepositoryInterface`

### メソッド名
- 取得: `find`, `get`, `show`
- 作成: `create`, `store`
- 更新: `update`
- 削除: `delete`, `destroy`

## エラーハンドリング

### Service層での例外処理
```php
try {
    // 処理
} catch (ModelNotFoundException $e) {
    Log::warning('Model not found: ' . $e->getMessage());
    throw $e;
} catch (\Exception $e) {
    Log::error('Unexpected error: ' . $e->getMessage());
    throw new ServiceException('処理中にエラーが発生しました', 0, $e);
}
```

## パフォーマンス考慮事項

- Repository層でのEager Loading実装
- 不要なクエリの削減
- キャッシュの適切な活用

## セキュリティ考慮事項

- 入力値の適切なバリデーション
- SQLインジェクション対策（Eloquent使用）
- 認可処理の適切な実装

これらのルールに従って、保守性・可読性・テスト容易性の高いLaravelアプリケーションを開発してください。
